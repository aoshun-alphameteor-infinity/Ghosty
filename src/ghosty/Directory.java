package ghosty;



import java.io.IOException;
import static java.nio.file.FileVisitResult.*;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeSet;
import java.nio.file.attribute.*;

public class Directory {
	private Path location;
	
	///this is the representation
	private Set<FILE> filetree;

	
	public Directory(Path location){
		this.location=location;
		filetree=new TreeSet<FILE>();
	}
	
	/**
	 * 
	 * @param start
	 * @return result
	 * @throws IOException
	 * 
	 * start is the root of the file system in which the method will work.
	 * 
	 * this method return a list of FILE which represent the file tree.
	 * 
	 * note: this method don't work with the .ghosty directory generated by the program himself in order to keep the program data confidential
	 */
	public void fileTreeMaker() throws IOException{
		
		Files.walkFileTree(location, new SimpleFileVisitor<Path>(){
			 @Override
             public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
			 	throws IOException
			 {
				if(!dir.getFileName().equals(".ghosty")) 
				{
					filetree.add(new FILE(dir,true));
				}
				
				return CONTINUE; 
			 }
			 
			@Override
	         public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
	             throws IOException
	         {
				if(!file.getParent().getFileName().equals(".ghosty"))
	             {
					filetree.add(new FILE(file,false));
	             }
				return CONTINUE;
	         }
			
			@Override
	         public FileVisitResult postVisitDirectory(Path dir, IOException e)
	             throws IOException
	         {
	             if (e == null) {
	               
	                 return CONTINUE;
	             } else {
	                 // directory iteration failed
	                 throw e;
	             }
	         }
			
		});
	}

	/**
	 * 
	 * @param newlocation is the new Path to synchronize the files
	 * 
	 * set the location of the synchronization directory
	 */
	public void setLocation(Path newlocation){
		location=newlocation;
	}
	
	/**
	 * @return the list which represent the fileTree
	 */
	public Set<FILE> getFileTree(){
		return filetree;
	}
	
	public void clearFileTree(){
		filetree.clear();
	}
	
	public void removeFILE(FILE f){
		filetree.remove(f);
	}
	
	public Iterator<FILE> fileTreeIterator(){
		return filetree.iterator();
	}
	
	public Path getDirectoryPath(){
		return location;
	}
	
	public void AddFILE(FILE f){
		filetree.add(f);
	}
}
