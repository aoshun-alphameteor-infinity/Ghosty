package ghosty;



import java.io.IOException;



import static java.nio.file.FileVisitResult.*;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.util.ArrayList;
import java.util.List;
import java.nio.file.attribute.*;

public class Directory {
	/**
	 * this three fields are used for create a representation of the file tree in which we work;
	 */
	///this is the representation
	private List<FILE> result;
	///this one is used for keep the recursive order
	private List<FILE> inCurrentDir;
	///it is the number of elements in a directory
	private int numberelt;
	
	
	/**
	 * 
	 * @param start
	 * @return result
	 * @throws IOException
	 * 
	 * start is the root of the file system in which the method will work.
	 * 
	 * this method return a list of FILE which represent the file tree.
	 * 
	 * note: this method don't work with the .ghosty directory generated by the program himself in order to keep the program data confidential
	 */
	public List<FILE> fileTreeMaker(Path start) throws IOException{
		result=new ArrayList<FILE>();
		
		Files.walkFileTree(start, new SimpleFileVisitor<Path>(){
			 @Override
             public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
			 	throws IOException
			 {
				if(!dir.getFileName().equals(".ghosty")) 
				{
					numberelt=0;
					inCurrentDir=new ArrayList<FILE>();
				}
				
				return CONTINUE; 
			 }
			 
			@Override
	         public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
	             throws IOException
	         {
				if(!file.getParent().getFileName().equals(".ghosty"))
	             {
					inCurrentDir.add(new FILE(file,-1));
					numberelt++;
	             }
				return CONTINUE;
	         }
			
			@Override
	         public FileVisitResult postVisitDirectory(Path dir, IOException e)
	             throws IOException
	         {
	             if (e == null) {
	                 if(!dir.getFileName().equals(".ghosty"))
	                 {
	                	 result.add(new FILE(dir,numberelt));
	                	 result.addAll(inCurrentDir);
	                	 inCurrentDir=null;
	                 }
	                 return CONTINUE;
	             } else {
	                 // directory iteration failed
	                 throw e;
	             }
	         }
			
		});
		return result;
	}
	
	
	
}
